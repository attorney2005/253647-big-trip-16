Index: src/main.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main.js b/src/main.js
--- a/src/main.js	(revision e35b8a05eb127506c098d8cc4d798ea6596d0c09)
+++ b/src/main.js	(date 1639423393204)
@@ -1,77 +1,8 @@
-import SiteMenuView from './view/menu-view.js';
-import FiltersView from './view/filter-view.js';
-import SortView from './view/sort-view.js';
-import NewPointView from './view/new-point-view.js';
-import PointView from './view/point-view.js';
-import NoPointView from './view/no-point-view.js';
-import PointsListView from './view/points-list-view.js';
 import {generatePoint} from './mock/task.js';
-import {generateFilter} from './mock/filter.js';
-import {RenderPosition} from './const.js';
-import {render} from './render.js';
+import BoardPresenter from './presenter/board-presenter';
 
 const POINTS_COUNT = 3;
 const points = Array.from({length: POINTS_COUNT}, generatePoint);
-const filters = generateFilter(points);
-
-const headerElement = document.querySelector('.trip-main__trip-controls');
-const navHeaderElement = headerElement.querySelector('.trip-controls__navigation');
-const filtersHeaderElement = headerElement.querySelector('.trip-controls__filters');
-
-
-const renderPoint = (pointListElement, point) => {
-  const pointComponent = new PointView(point);
-  const pointEditComponent = new NewPointView(point);
-
-  const replacePointToForm = () => {
-    pointListElement.replaceChild(pointEditComponent.element, pointComponent.element);
-  };
-
-  const replaceFormToPoint = () => {
-    pointListElement.replaceChild(pointComponent.element, pointEditComponent.element);
-  };
-
-  const onEscKeyDown = (evt) => {
-    if (evt.key === 'Escape' || evt.key === 'Esc') {
-      evt.preventDefault();
-      replaceFormToPoint();
-      document.removeEventListener('keydown', onEscKeyDown);
-    }
-  };
-
-  pointComponent.setrollupButtonClickHandler(() => {
-    replacePointToForm();
-    document.addEventListener('keydown', onEscKeyDown);
-  });
-
-  pointEditComponent.setsafeButtonClickHandler(() => {
-    replaceFormToPoint();
-    document.removeEventListener('keydown', onEscKeyDown);
-  });
-
-  pointEditComponent.setresetButtonClickHandler(() => {
-    replaceFormToPoint();
-    document.removeEventListener('keydown', onEscKeyDown);
-  });
-
-  render(pointListElement, pointComponent, RenderPosition.BEFOREEND);
-};
-render(navHeaderElement, new SiteMenuView(), RenderPosition.BEFOREEND);
-render(filtersHeaderElement, new FiltersView(filters), RenderPosition.BEFOREEND);
 
-const mainElement = document.querySelector('.page-main');
-const eventsElementContainer = document.querySelector('.trip-events');
-
-render(eventsElementContainer, new PointsListView(), RenderPosition.BEFOREEND);
-
-if (!points.length) {
-  render(eventsElementContainer, new NoPointView());
-} else {
-  render(eventsElementContainer, new SortView());
-  render(eventsElementContainer, new PointsListView());
-  const eventsElementList = mainElement.querySelector('.trip-events__list');
-  for (const point of points) {
-    renderPoint(eventsElementList, point);
-  }
-}
+new BoardPresenter().init(points);
 
Index: src/presenter/board-presenter.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/presenter/board-presenter.js b/src/presenter/board-presenter.js
--- a/src/presenter/board-presenter.js	(revision e35b8a05eb127506c098d8cc4d798ea6596d0c09)
+++ b/src/presenter/board-presenter.js	(date 1639424152792)
@@ -1,54 +1,110 @@
-// import SiteMenuView from './view/menu-view.js';
-// import FiltersView from './view/filter-view.js';
-// import SortView from './view/sort-view.js';
-// import NewPointView from './view/new-point-view.js';
-// import PointView from './view/point-view.js';
-// import NoPointView from './view/no-point-view.js';
-// import PointsListView from './view/points-list-view.js';
-// import {generatePoint} from './mock/task.js';
-// import {generateFilter} from './mock/filter.js';
-// import {RenderPosition} from './const.js';
-// import {render} from './render.js';
-//
-// POINTS_COUNT = 3;
-//
-// export default class BoardPresenter {
-//   #boardContainer = null;
-//
-//
-//   #sortComponent = new SortView();
-//   #pointListComponent = new PointsListView();
-//   #noPointComponent = new NoPointView();
-//
-//   #boardPoints = [];
-//
-//   constructor(boardContainer) {
-//     this.#boardContainer = boardContainer;
-//   }
-//
-//   init = (boardPoints) => {
-//     this.#boardPoints = [...boardPoints];
-//     // Метод для инициализации (начала работы) модуля,
-//     // малая часть текущей функции renderBoard в main.js
-//   }
-//
-//   #renderSort = () => {
-//     // Метод для рендеринга сортировки
-//     render(this.#boardComponent, this.#sortComponent, RenderPosition.AFTERBEGIN);
-//   }
-//
-//   #renderPoint = (point) => {
-//     // Метод, куда уйдёт логика созданию и рендерингу компонетов задачи,
-//     // текущая функция renderTask в main.js
-//
-//   }
-//
-//   #renderPoints = () => {
-//     // Метод для рендеринга N-задач за раз
-//   }
-//
-//   #renderNoPoints = () => {
-//     // Метод для рендеринга заглушки
-//     render(this.#boardComponent, this.#noTaskComponent, RenderPosition.AFTERBEGIN);
-//   }
-// }
+import SortView from '../view/sort-view.js';
+import NewPointView from '../view/new-point-view.js';
+import PointView from '../view/point-view.js';
+import NoPointView from '../view/no-point-view.js';
+import PointsListView from '../view/points-list-view.js';
+import {generateFilter} from '../mock/filter.js';
+import {RenderPosition} from '../const.js';
+import {render} from '../render.js';
+import SiteMenuView from '../view/menu-view';
+import FiltersView from '../view/filter-view';
+
+export default class BoardPresenter {
+
+  /* Components */
+  #sortComponent = new SortView();
+  #noPointsComponent = new NoPointView();
+  #pointListComponent = new PointsListView();
+  #menuComponent = new SiteMenuView();
+  #filtersComponent = null;
+
+  /* Elements */
+  #mainElement = document.querySelector('.page-main');
+  #eventsContainerElement = document.querySelector('.trip-events');
+
+  /* Header elements */
+  #headerElement = document.querySelector('.trip-main__trip-controls');
+  #navHeaderElement = this.#headerElement.querySelector('.trip-controls__navigation');
+  #filtersHeaderElement = this.#headerElement.querySelector('.trip-controls__filters');
+
+  /* Data */
+  #boardPoints = [];
+  #filters = [];
+
+  constructor() {}
+
+  init = (boardPoints) => {
+    this.#boardPoints = [...boardPoints];
+    this.#filters = generateFilter(this.#boardPoints);
+    this.#filtersComponent = new FiltersView(this.#filters);
+
+    render(this.#navHeaderElement, this.#menuComponent, RenderPosition.BEFOREEND);
+    render(this.#filtersHeaderElement, this.#filtersComponent, RenderPosition.BEFOREEND);
+
+    if (!this.#boardPoints.length) {
+      this.#renderNoPoints();
+    } else {
+      this.#renderSort();
+      this.#renderPointList();
+      this.#renderPoints();
+    }
+  }
+
+  #renderSort = () => {
+    render(this.#eventsContainerElement, this.#sortComponent);
+  }
+
+  #renderPoint = (point) => {
+    const pointComponent = new PointView(point);
+    const pointEditComponent = new NewPointView(point);
+    const eventsElementList = this.#mainElement.querySelector('.trip-events__list');
+
+    const replacePointToForm = () => {
+      eventsElementList.replaceChild(pointEditComponent.element, pointComponent.element);
+    };
+
+    const replaceFormToPoint = () => {
+      eventsElementList.replaceChild(pointComponent.element, pointEditComponent.element);
+    };
+
+    const onEscKeyDown = (evt) => {
+      if (evt.key === 'Escape' || evt.key === 'Esc') {
+        evt.preventDefault();
+        replaceFormToPoint();
+        document.removeEventListener('keydown', onEscKeyDown);
+      }
+    };
+
+    pointComponent.setrollupButtonClickHandler(() => {
+      replacePointToForm();
+      document.addEventListener('keydown', onEscKeyDown);
+    });
+
+    pointEditComponent.setsafeButtonClickHandler(() => {
+      replaceFormToPoint();
+      document.removeEventListener('keydown', onEscKeyDown);
+    });
+
+    pointEditComponent.setresetButtonClickHandler(() => {
+      replaceFormToPoint();
+      document.removeEventListener('keydown', onEscKeyDown);
+    });
+
+
+    render(eventsElementList, pointComponent, RenderPosition.BEFOREEND);
+  }
+
+  #renderPoints = () => {
+    for (const point of this.#boardPoints) {
+      this.#renderPoint(point);
+    }
+  }
+
+  #renderPointList = () => {
+    render(this.#eventsContainerElement, this.#pointListComponent, RenderPosition.BEFOREEND);
+  }
+
+  #renderNoPoints = () => {
+    render(this.#eventsContainerElement, this.#noPointsComponent);
+  }
+}
